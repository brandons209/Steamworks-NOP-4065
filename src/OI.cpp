// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/DriveForward.h"
#include "Commands/DriveToPosition.h"
#include "Commands/Launch.h"
#include "Commands/Load.h"
#include "Commands/Rotate.h"
#include "Commands/TankDrive.h"


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Commands/CompleteLaunch.h"
#include "Commands/Winch.h"
#include "Commands/Intake.h"
#include "Commands/ToggleCommands/SwapFrontToGear.h"
#include "Commands/ToggleCommands/SwapFrontToIntake.h"
#include "Commands/ResetAngle.h"
#include "Commands/ManualAngleCalibrations/LauncherAngleUp.h"
#include "Commands/ManualAngleCalibrations/LauncherAngleDown.h"
#include "Commands/ManualAngleCalibrations/RobotAngleLeft.h"
#include "Commands/ManualAngleCalibrations/RobotAngleRight.h"

OI::OI() {
    // Process operator interface input here.
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    joystick.reset(new Joystick(0));
    
    //loadItFam.reset(new JoystickButton(joystick.get(), 7));//direct input logitech
    //loadItFam->WhileHeld(new Load());

    //launchFam.reset(new JoystickButton(joystick.get(), 8));//same as above
    //launchFam->WhileHeld(new CompleteLaunch());

    load.reset(new JoystickAnalogButton(joystick.get(), 2));
    load->WhileActive(new Load());

    launch.reset(new JoystickAnalogButton(joystick.get(), 3));
    load->WhileActive(new CompleteLaunch());

    intakeBalls.reset(new JoystickButton(joystick.get(), 6));
    intakeBalls->WhileHeld(new Intake());

    winchItUp.reset(new JoystickButton(joystick.get(), 5));
    winchItUp->WhileHeld(new Winch());

    togButton.reset(new JoystickButton(joystick.get(), 10));

    toggleFrontandBack.reset(new ToggledPressedButtonScheduler(togButton->Grab(), togButton.get(), new SwapFrontToGear(), new SwapFrontToIntake()));
    toggleFrontandBack->Start();

    launcherAngleUp.reset(new POVButton(joystick.get(), 0));
    launcherAngleUp->WhenActive(new LauncherAngleUp());

    launcherAngleDown.reset(new POVButton(joystick.get(), 180));
    launcherAngleDown->WhenActive(new LauncherAngleDown());

    robotAngleLeft.reset(new POVButton(joystick.get(), 270));
    robotAngleLeft->WhenActive(new RobotAngleLeft());

    robotAngleRight.reset(new POVButton(joystick.get(), 90));
    robotAngleRight->WhenActive(new RobotAngleRight());

    // SmartDashboard Buttons
    SmartDashboard::PutData("Load", new Load());
    SmartDashboard::PutData("Launch", new Launch());
    SmartDashboard::PutData("DriveForward", new DriveForward());
    SmartDashboard::PutData("Rotate", new Rotate());
    SmartDashboard::PutData("TankDrive", new TankDrive());
    SmartDashboard::PutData("DriveToPosition", new DriveToPosition());
    SmartDashboard::PutData("Reset Angle", new ResetAngle());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

std::shared_ptr<Joystick> OI::getJoystick() {
   return joystick;
}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
