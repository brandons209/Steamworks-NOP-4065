// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Launcher.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Launcher::Launcher() : Subsystem("Launcher") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    launcherMotor = RobotMap::launcherlauncherMotor;
    angleChanger = RobotMap::launcherangleChanger;
    anglePot = RobotMap::launcheranglePot;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    desiredAngle = 0;
    currentAngle = 0;
    shortVelocity = 240; //inches/sec
    longVelocity = 360; //inches/sec
    I = 0;
    I2 = 0;

}

void Launcher::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Launcher::calculateAngle(){
	Robot::driveTrain.get()->updatePos();
	const double gravConst = 386.09;
	const double towerHeight = 97.0;
	const double launchV = shortVelocity;
	Robot::driveTrain.get()->updatePos();
	double x = Robot::driveTrain.get()->realX;
	double y = Robot::driveTrain.get()->realY;

	double distanceFromBoiler = sqrt( (pow(x, 2) + pow(y, 2)) );

	double a = (-0.5 * gravConst * pow(distanceFromBoiler, 2) ) / (pow(launchV, 2));
	double c = a - towerHeight;

	desiredAngle = atan( ( (-1 * distanceFromBoiler) - sqrt( (pow(distanceFromBoiler, 2)) - (4*a*c) ) ) / (2 * a) ) * (180/M_PI);


}

void Launcher::moveToAngle(){
	calculateAngle();

	const double kP = 0.02;
	const double kI = 0.000000000001;

	currentAngle = anglePot->Get();
	double P = desiredAngle - currentAngle;
	I += P;

	angleChanger->Set(P*kP + I*kI);

	//reset I in command

}

void Launcher::launchFam(double desiredVelocity){

	const double kP = 0.02;
	const double kI = 0.000000000001;
	double currentVelocity = (launcherMotor->GetPulseWidthVelocity() * RobotMap::flywheelCircumference) / 60;

	double P = desiredVelocity - currentVelocity;
	I2 += P;

	launcherMotor->Set(P*kP + I*kI);

	/*if(isLinedUp){
		//load
	}else{
		//dont load
	}*/

}
